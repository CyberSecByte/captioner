# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dlgTheme.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import logging
from PyQt5 import QtCore, QtGui, QtWidgets


# qt
from PyQt5.QtWidgets import QDialog
import PyQt5.QtWidgets

# theme
from PyQt5.QtWidgets import QStyleFactory

class _Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(376, 93)
        
        # icon
        icon = os.path.join("src", "ui", "theme.png")
        self.setWindowIcon(QtGui.QIcon(icon))
        
        # window
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(20, 60, 341, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.gridLayoutWidget = QtWidgets.QWidget(Dialog)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 10, 361, 41))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.comboStyle = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.comboStyle.setObjectName("comboStyle")
        self.gridLayout.addWidget(self.comboStyle, 0, 0, 1, 1)

        self.retranslateUi(Dialog)
        self.buttonBox.accepted.connect(Dialog.accept) # type: ignore
        self.buttonBox.rejected.connect(Dialog.reject) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Theme"))
        self.comboStyle.setToolTip(_translate("Dialog", "Theme"))
        self.comboStyle.setStatusTip(_translate("Dialog", "Theme"))


def get_all_themes():
    # get inbuilt themes
    results = QStyleFactory.keys()
    try:
        import qdarktheme
        for theme in qdarktheme.get_themes():
            results.append("qdark_" + theme)
    except:
        logging.info("qdarkthem module is not installed")
        
    # return
    return results

def apply_theme(current_style: str, app: QtWidgets.QApplication = None, ):
    
    # check if the app is provided
    if not app:
        app = QtWidgets.QApplication.instance()
    
    # reset style
    app.setStyleSheet("")
    
    # check installed themes
    if "qdark_" in current_style:
        try:
            from qdarktheme._style_loader import load_palette, load_stylesheet
            style = load_stylesheet(theme=current_style.replace("qdark_", ""))
            app.setStyleSheet(style)
        except Exception as e:
            logging.exception(e)
            logging.info("pyqtdark module is not installed")

    else:
        # included qt theme
        app.setStyle(current_style)



class ThemeChooseDlg(QDialog, _Ui_Dialog):
    def __init__(self,parent=None):
        QDialog.__init__(self,parent)
        self.setupUi(self)
        
        # list themes
        self.list_themes()
        
    def list_themes(self):
        # list themes
        self.comboStyle.addItems(get_all_themes())
        
        # find current style
        index = self.comboStyle.findText(
                    QtWidgets.QApplication.instance().property("current_style"),
                    QtCore.Qt.MatchFixedString
        )
        
        # set current style
        self.comboStyle.setCurrentIndex(index)
        
    def getResult(self):
        """
            Our function to return the selected theme
        """
        if not self.comboStyle.currentText() is None:
            return self.comboStyle.currentText()
        else:
            print("style: ", self.style().objectName())
            return self.style().objectName()
